Disadvantages or drawbacks of JDBC :
    -> Biolerplate code
    -> No automatic table creation
    -> No ID generation
    -> Handle Checked Exception
    -> No cache memory
    -> Establishing the relation between multiple tables is very difficult

Hibernate with JPA (Java Persistence API) :
    - Hibernate is a framework which helps in creating connection with database and do the CRUD operations.
    Features :
        -> Hibernate is ORM(Object Relational Mapping) tool.
        -> Establishing the relation between multiple tables is easy.
        -> Automatic table creation is available.
        -> Automatic ID generation is available.
        -> No need to Handle the Exceptions.    
        -> Hibernate provides cache memory which helps in improving the performance of the application.
        -> It support dialect.
        -> It provides HQL(Hibernate Query Language) or JPQL(Java Persistence Query Language).

How does Hibernate works :
    - Hibernate uses JDBC internally to connect with the database and JDBC uses driver software to connect to database.
    diagram 25/11/24.

ORM (Object Relational Mapping) :
    - entity class is a class which is related to table in database.
    
    @entity
    class Student{
        @id  ---> primary key
        int id;
        String name;
        String email;
    
        Student s = new Student();
        s.setId(1);
        s.setName("Rahul");
        s.setEmail("rahul@gmail.com");
    }

    - In ORM(Object Relational Mapping) the entity class will be represented as or mapped with database table.
    - In this case the entity class name will be represented as table name.
    - Every variables of this class will be represented as columns inside the table.
    - The datatype of each variable will be represented as datatype of the respective column.
    - An Object of this entity class will be represented as rows inside the table.

Rules to create entity class :
    - The class should be of public and non-abstract.
    - This class should be anotated with @entity anotation.
    - This class should have one ID that can be created by using @id anotation which is represented as primary key.
    - Each and Every variables in entity class should have getters and setters.
    - This class should contain zero parameterized contructors or default contructor.
     
Program to do CRUD operations using Hibernate :
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("Persistence Unit Name");
        -> Load the driver.
        -> Create the connection.

    EntityManager em = emf.createEntityManager();
        -> em.persist(entity) ----> save/insert
        -> em.find(entity) ------> read/fetch
        -> em.merge(entity) ------> update
        -> em.remove(entity) ------> delete
    
    EntityTrasaction et = em.getTrasaction();
        -> et.begin();
        -> et.commit(); 
    
Program to fetch all the records from the table :


EntityManagerFactory:
    - EntityManagerFactory is an interface.
    - EntityManagerFactory will be create for perticular database.
    - The main purpose of EntityManagerFactory to get Object of EntityManager.
    - We can get an Object of EntityManagerFactory, we need to call createEntityManagerFactory("Persistence Unit Name") method Persent inside Persistence class by passing Persistence Unit name.
    - This Persistence unit will be containing the database configuration.
    - With the help of this Persistence unit, EntityManagerFactory will load the driver and creates a connection.

EntityManager:
    - EntityManager is an interface Persent inside javax.Persistence package.
    - EntityManager contains some methods which helps in performing CRUD operations.
    Eg. persist(entity) => which is used to insert the record or save the record.

        find(entity.class,et) => which is used to fetch a single record from table by using primary key.
    return type of find() is entity Object.
    
        merge(entity) => It will Check whether the given record is Persent or not , if it is Persent it update the existing record else it will insert it as a new record.
    return type of merge() entity Object , it will return the updated entity Object.

        remove(entity) => It is used to delete record from the table.
    
    - We can get an Object of EntityManager using createEntityManager() method Persent inside EntityManagerFactory Object.
    - For a EntityManagerFactory we can have any numbers of EntityManagers.

EntityTrasaction:
    - EntityTrasaction is an interface Persent inside javax.Persistence package.
    - We can get an Object of EntityTrasaction by using getTrasaction() method Persent inside EntityManager Object.
    - Since all the DML statements are not autocommit statements, we have to commit them by managing the Trasaction by using EntityTrasaction.
    - EntityTrasaction is a set of changes or actions which are committed to the table or rolled back together.
    - In java EntityTrasaction is nothing but a changes made to the set of java Objects will be committing together or rolled back together.
    Eg. EntityTrasaction provides two important methods to manage the Trasaction :
        begin() => to start the Trasaction.
        commit() => to save the Trasaction.

Persistence.xml:
    - This is a central piece of configuration which contains any number of Persistence units.
    - Each Persistence unit can have particular database configuration.

Hibernate mappings:
    - Establishing the relation between multiple tables or entities using Hibernate known as Hibernate mappings.
    - Ther are two ways to acheive Hibernate mappings they are : 
        1. Unidirectional
        2. Bidirectional

Types of Hibernate mappings:
    1. one to one ==> car & engine.
    2. one to many ==> bank & accounts.
    3. many to one ==> employees & manager.
    4. many to many ==> students & courses.

Unidirectional Mapping:
    1. one to one :
        - In Hibernate we can acheive one to one Mapping using @OnetoOne anotation provided by Hibernate.
        

note:



    3. many-to-one:

    4. many-to-many-uni:
    
